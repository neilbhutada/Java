package one;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.List;

import javax.imageio.ImageIO;

import org.apache.pdfbox.contentstream.PDFStreamEngine;
import org.apache.pdfbox.contentstream.operator.Operator;
import org.apache.pdfbox.cos.COSBase;
import org.apache.pdfbox.cos.COSName;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.graphics.PDXObject;
import org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject;
import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;
import org.apache.poi.common.usermodel.HyperlinkType;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFHyperlink;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.CreationHelper;

import java.util.*; 
import java.nio.charset.*;

public class PDF_Main extends PDFStreamEngine{
	  public PDF_Main() throws IOException
	    {
	    }
	  
	    static String s[] = new String[996];
	    public int imageNumber = 0;
	    static String getAlphaNumericString(int n) 
	    { 
	  
	        byte[] array = new byte[256]; 
	        new Random().nextBytes(array); 
	  
	        String randomString 
	            = new String(array, Charset.forName("UTF-8")); 
	  
	        // Create a StringBuffer to store the result 
	        StringBuffer r = new StringBuffer(); 
	  
	 
	        for (int k = 0; k < randomString.length(); k++) { 
	  
	            char ch = randomString.charAt(k); 
	  
	            if (((ch >= 'a' && ch <= 'z') 
	                 || (ch >= 'A' && ch <= 'Z') 
	                 || (ch >= '0' && ch <= '9')) 
	                && (n > 0)) { 
	  
	                r.append(ch); 
	                n--; 
	            } 
	        } 
	  
	        // return the resultant string 
	        return r.toString(); 
	    } 
	  
	public static void main(String[] args) throws Exception{
		HSSFWorkbook workbook = new HSSFWorkbook();
		HSSFSheet sheet = workbook.createSheet("Voters list");
		
		PDF pdfManager = new PDF();
		int i = 0 ;
		int k = 0;
		int j = 1;
		 PDDocument document = null;
         String fileName = "pdf/ActualList.pdf";
        pdfManager.setFilePath("pdf/ActualList.pdf");
        try {
            String text = pdfManager.toText();
            document = PDDocument.load( new File(fileName) );
            PDF_Main printer = new PDF_Main();
            int pageNum = 0;
            for( PDPage page : document.getPages() )
            {
                pageNum++;
               // System.out.println( "Processing page: " + pageNum );
                printer.processPage(page);
            }
     String [] word = text.split("\\s");
HSSFRow head = sheet.createRow(0);
HSSFCell cell0 = head.createCell(0);
HSSFCell cell11 = head.createCell(1);
HSSFCell cell21 = head.createCell(2);
HSSFCell cell31 = head.createCell(3);
HSSFCell cell41 = head.createCell(4);
HSSFCell cell51 = head.createCell(5);
HSSFCell cell61 = head.createCell(6);
HSSFCell cell71 = head.createCell(7);
cell0.setCellValue("Area Number");
cell11.setCellValue("Voter ID");
cell21.setCellValue("Constituency number");
cell31.setCellValue("Voting booth number");
cell41.setCellValue("Resident Number");
cell51.setCellValue("Name of Voter");
cell61.setCellValue("Age");
cell71.setCellValue("Image name");
CreationHelper createHelper = workbook.getCreationHelper();
HSSFCellStyle hlinkstyle = workbook.createCellStyle();
HSSFFont hlinkfont = workbook.createFont();
hlinkfont.setUnderline(HSSFFont.U_SINGLE);
//hlinkfont.setColor(HSSFColor.BLUE.index);
hlinkstyle.setFont(hlinkfont);
          for(String t : word)
          {
        	 //System.out.println(t);
             if(t.contains("147/"))
              {
            	 
            
            		 
            	  String l[] = t.split("/");
            	  System.out.println(t+"\t"+word[i-4]+"\t"+ l[0]+"\t"+l[1]+"\t"+l[2]+"\t"+word[i+6]+" "+word[i+7]+" "+word[i+8]+"\t"+word[i-8]+"\t"+word[i+27]);
            	  HSSFRow row = sheet.createRow(j);
            	  HSSFCell cell = row.createCell(0);
            	  HSSFCell cell1 = row.createCell(1);
            	  HSSFCell cell2 = row.createCell(2);
            	  HSSFCell cell3 = row.createCell(3);
            	  HSSFCell cell4 = row.createCell(4);
            	  HSSFCell cell5 = row.createCell(5);
            	  HSSFCell cell6 = row.createCell(6);
            	  HSSFCell cell7 = row.createCell(7);
            	  cell.setCellValue(t);
            	  cell1.setCellValue(word[i-4]);
             	  cell2.setCellValue(l[0]);
            	  cell3.setCellValue(l[1]);
             	  cell4.setCellValue(l[2]);
            	  cell5.setCellValue(word[i+6]+" "+word[i+7]+" "+word[i+8]);
            	  cell6.setCellValue(word[i-8]);
            	  cell7.setCellValue(s[k]+".png");
            	  HSSFHyperlink link = (HSSFHyperlink)createHelper.createHyperlink(HyperlinkType.FILE);
            	  link.setAddress(s[k]+".png");
            	  
                  cell7.setHyperlink(link);
                 cell7.setCellStyle(hlinkstyle);
            	 workbook.write(new File("pdf/voter list.xls"));
            k++;
            	j++;
              }
            
           
              
              
              
        	 i++;
        
          }
           
        } catch (IOException ex) {
            System.err.println(ex.getMessage());
       }
    }
	protected void processOperator( Operator operator, List<COSBase> operands) throws IOException
    {
        String operation = operator.getName();
        if( "Do".equals(operation) )
        {
            COSName objectName = (COSName) operands.get( 0 );
            PDXObject xobject = getResources().getXObject( objectName );
            if( xobject instanceof PDImageXObject)
            {
                PDImageXObject image = (PDImageXObject)xobject;
                int imageWidth = image.getWidth();
                int imageHeight = image.getHeight();
                //System.out.println(imageWidth);
                if(imageWidth>=146)
               { // same image to local
                BufferedImage bImage = new BufferedImage(imageWidth,imageHeight,BufferedImage.TYPE_INT_ARGB);
                bImage = image.getImage();
                s[imageNumber] = getAlphaNumericString(100);
                ImageIO.write(bImage,"PNG",new File("pdf/"+s[imageNumber]+".png"));
               // System.out.println("Image saved.");
                imageNumber++;
                }
                
            }
            else if(xobject instanceof PDFormXObject)
            {
                PDFormXObject form = (PDFormXObject)xobject;
                showForm(form);
            }
        }
        else
        {
            super.processOperator( operator, operands);
        }
    }

	}


